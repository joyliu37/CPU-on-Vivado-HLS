// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module loadJob (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        FunctionalArithmeticUnit_rs_0_tag_read,
        FunctionalArithmeticUnit_rs_1_tag_read,
        FunctionalArithmeticUnit_rs_2_tag_read,
        FunctionalArithmeticUnit_rs_0_func_read,
        FunctionalArithmeticUnit_rs_1_func_read,
        FunctionalArithmeticUnit_rs_2_func_read,
        FunctionalArithmeticUnit_rs_0_running_read_2,
        FunctionalArithmeticUnit_rs_0_running_read,
        FunctionalArithmeticUnit_rs_1_running_read_2,
        FunctionalArithmeticUnit_rs_1_running_read,
        FunctionalArithmeticUnit_rs_2_running_read_2,
        FunctionalArithmeticUnit_rs_2_running_read,
        FunctionalArithmeticUnit_rs_0_s_V_read,
        FunctionalArithmeticUnit_rs_1_s_V_read,
        FunctionalArithmeticUnit_rs_2_s_V_read,
        FunctionalArithmeticUnit_rs_0_t_V_read,
        FunctionalArithmeticUnit_rs_1_t_V_read,
        FunctionalArithmeticUnit_rs_2_t_V_read,
        FunctionalArithmeticUnit_rs_0_s_value_read,
        FunctionalArithmeticUnit_rs_1_s_value_read,
        FunctionalArithmeticUnit_rs_2_s_value_read,
        FunctionalArithmeticUnit_rs_0_t_value_read,
        FunctionalArithmeticUnit_rs_1_t_value_read,
        FunctionalArithmeticUnit_rs_2_t_value_read,
        FunctionalArithmeticUnit_calculateStages_0_active_read,
        FunctionalArithmeticUnit_calculateStages_0_Q_read,
        FunctionalArithmeticUnit_calculateStages_0_func_read,
        FunctionalArithmeticUnit_calculateStages_0_Vs_read,
        FunctionalArithmeticUnit_calculateStages_0_Vt_read,
        FunctionalArithmeticUnit_calculateStages_0_R_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] FunctionalArithmeticUnit_rs_0_tag_read;
input  [7:0] FunctionalArithmeticUnit_rs_1_tag_read;
input  [7:0] FunctionalArithmeticUnit_rs_2_tag_read;
input  [7:0] FunctionalArithmeticUnit_rs_0_func_read;
input  [7:0] FunctionalArithmeticUnit_rs_1_func_read;
input  [7:0] FunctionalArithmeticUnit_rs_2_func_read;
input  [0:0] FunctionalArithmeticUnit_rs_0_running_read_2;
input  [0:0] FunctionalArithmeticUnit_rs_0_running_read;
input  [0:0] FunctionalArithmeticUnit_rs_1_running_read_2;
input  [0:0] FunctionalArithmeticUnit_rs_1_running_read;
input  [0:0] FunctionalArithmeticUnit_rs_2_running_read_2;
input  [0:0] FunctionalArithmeticUnit_rs_2_running_read;
input  [63:0] FunctionalArithmeticUnit_rs_0_s_V_read;
input  [63:0] FunctionalArithmeticUnit_rs_1_s_V_read;
input  [63:0] FunctionalArithmeticUnit_rs_2_s_V_read;
input  [63:0] FunctionalArithmeticUnit_rs_0_t_V_read;
input  [63:0] FunctionalArithmeticUnit_rs_1_t_V_read;
input  [63:0] FunctionalArithmeticUnit_rs_2_t_V_read;
input  [0:0] FunctionalArithmeticUnit_rs_0_s_value_read;
input  [0:0] FunctionalArithmeticUnit_rs_1_s_value_read;
input  [0:0] FunctionalArithmeticUnit_rs_2_s_value_read;
input  [0:0] FunctionalArithmeticUnit_rs_0_t_value_read;
input  [0:0] FunctionalArithmeticUnit_rs_1_t_value_read;
input  [0:0] FunctionalArithmeticUnit_rs_2_t_value_read;
input  [0:0] FunctionalArithmeticUnit_calculateStages_0_active_read;
input  [7:0] FunctionalArithmeticUnit_calculateStages_0_Q_read;
input  [7:0] FunctionalArithmeticUnit_calculateStages_0_func_read;
input  [63:0] FunctionalArithmeticUnit_calculateStages_0_Vs_read;
input  [63:0] FunctionalArithmeticUnit_calculateStages_0_Vt_read;
input  [63:0] FunctionalArithmeticUnit_calculateStages_0_R_read;
output  [0:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [63:0] ap_return_3;
output  [63:0] ap_return_4;
output  [63:0] ap_return_5;
output  [0:0] ap_return_6;
output  [0:0] ap_return_7;
output  [0:0] ap_return_8;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[63:0] ap_return_3;
reg[63:0] ap_return_4;
reg[63:0] ap_return_5;
reg[0:0] ap_return_6;
reg[0:0] ap_return_7;
reg[0:0] ap_return_8;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_425_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] tmp_45_fu_473_p1;
reg   [3:0] tmp_45_reg_838;
wire    ap_CS_fsm_state3;
wire   [0:0] ap_phi_mux_found_phi_fu_307_p4;
reg   [3:0] tmp_2_reg_843;
wire   [7:0] ReservationStation_f_fu_487_p5;
reg   [7:0] ReservationStation_f_reg_848;
wire   [63:0] ReservationStation_s_32_fu_496_p5;
reg   [63:0] ReservationStation_s_32_reg_855;
wire   [63:0] ReservationStation_t_35_fu_505_p5;
reg   [63:0] ReservationStation_t_35_reg_862;
wire   [0:0] tmp_3_fu_514_p2;
reg   [0:0] tmp_3_reg_869;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_4_fu_519_p2;
reg   [63:0] tmp_4_reg_874;
wire   [0:0] tmp_5_fu_523_p2;
reg   [0:0] tmp_5_reg_879;
wire   [63:0] tmp_6_fu_528_p2;
reg   [63:0] tmp_6_reg_884;
wire   [0:0] write_flag1_fu_532_p6;
reg   [0:0] write_flag1_reg_889;
wire   [0:0] write_flag4_fu_546_p6;
reg   [0:0] write_flag4_reg_894;
wire   [0:0] write_flag7_fu_560_p6;
reg   [0:0] write_flag7_reg_899;
reg   [1:0] index_reg_290;
wire   [0:0] tmp_fu_419_p2;
wire   [0:0] p_read1_i_fu_449_p2;
wire   [0:0] ReservationStation_r_fu_455_p5;
reg   [0:0] found_reg_302;
reg   [1:0] index3_reg_316;
reg   [0:0] ap_phi_mux_write_flag7_1_phi_fu_333_p4;
reg   [0:0] write_flag7_1_reg_329;
wire    ap_CS_fsm_state5;
reg   [0:0] ap_phi_mux_write_flag4_1_phi_fu_344_p4;
reg   [0:0] write_flag4_1_reg_340;
reg   [0:0] ap_phi_mux_write_flag1_1_phi_fu_355_p4;
reg   [0:0] write_flag1_1_reg_351;
reg   [7:0] ap_phi_mux_FunctionalArithmetic_231_phi_fu_365_p4;
reg   [7:0] FunctionalArithmetic_231_reg_362;
reg   [63:0] ap_phi_mux_FunctionalArithmetic_232_phi_fu_374_p4;
reg   [63:0] FunctionalArithmetic_232_reg_371;
reg   [63:0] ap_phi_mux_FunctionalArithmetic_233_phi_fu_383_p4;
reg   [63:0] FunctionalArithmetic_233_reg_380;
wire   [7:0] FunctionalArithmetic_fu_579_p3;
reg   [7:0] ap_phi_mux_FunctionalArithmetic_234_phi_fu_392_p4;
reg   [7:0] FunctionalArithmetic_234_reg_389;
wire   [63:0] FunctionalArithmetic_101_fu_593_p3;
reg   [63:0] ap_phi_mux_FunctionalArithmetic_235_phi_fu_401_p4;
reg   [63:0] FunctionalArithmetic_235_reg_398;
reg   [0:0] ap_phi_mux_write_flag_phi_fu_411_p4;
reg   [0:0] write_flag_reg_407;
wire   [0:0] ReservationStation_s_fu_431_p5;
wire   [0:0] ReservationStation_t_fu_440_p5;
wire   [7:0] ReservationStation_t_36_fu_464_p5;
wire   [3:0] tmp_1_fu_574_p2;
wire   [63:0] tmp_106_s_fu_587_p3;
wire   [0:0] FunctionalArithmetic_236_fu_600_p2;
wire   [0:0] FunctionalArithmetic_237_fu_605_p2;
wire   [0:0] FunctionalArithmetic_238_fu_610_p2;
wire   [0:0] FunctionalArithmetic_239_fu_615_p2;
reg   [0:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [63:0] ap_return_3_preg;
reg   [63:0] ap_return_4_preg;
reg   [63:0] ap_return_5_preg;
reg   [0:0] ap_return_6_preg;
reg   [0:0] ap_return_7_preg;
reg   [0:0] ap_return_8_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_condition_192;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_return_0_preg = 1'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 64'd0;
#0 ap_return_4_preg = 64'd0;
#0 ap_return_5_preg = 64'd0;
#0 ap_return_6_preg = 1'd0;
#0 ap_return_7_preg = 1'd0;
#0 ap_return_8_preg = 1'd0;
end

test_Issue_mux_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
test_Issue_mux_32eOg_U128(
    .din0(FunctionalArithmeticUnit_rs_0_s_value_read),
    .din1(FunctionalArithmeticUnit_rs_1_s_value_read),
    .din2(FunctionalArithmeticUnit_rs_2_s_value_read),
    .din3(index_reg_290),
    .dout(ReservationStation_s_fu_431_p5)
);

test_Issue_mux_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
test_Issue_mux_32eOg_U129(
    .din0(FunctionalArithmeticUnit_rs_0_t_value_read),
    .din1(FunctionalArithmeticUnit_rs_1_t_value_read),
    .din2(FunctionalArithmeticUnit_rs_2_t_value_read),
    .din3(index_reg_290),
    .dout(ReservationStation_t_fu_440_p5)
);

test_Issue_mux_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
test_Issue_mux_32eOg_U130(
    .din0(FunctionalArithmeticUnit_rs_0_running_read),
    .din1(FunctionalArithmeticUnit_rs_1_running_read),
    .din2(FunctionalArithmeticUnit_rs_2_running_read),
    .din3(index_reg_290),
    .dout(ReservationStation_r_fu_455_p5)
);

test_Issue_mux_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
test_Issue_mux_32fYi_U131(
    .din0(FunctionalArithmeticUnit_rs_0_tag_read),
    .din1(FunctionalArithmeticUnit_rs_1_tag_read),
    .din2(FunctionalArithmeticUnit_rs_2_tag_read),
    .din3(index3_reg_316),
    .dout(ReservationStation_t_36_fu_464_p5)
);

test_Issue_mux_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
test_Issue_mux_32fYi_U132(
    .din0(FunctionalArithmeticUnit_rs_0_func_read),
    .din1(FunctionalArithmeticUnit_rs_1_func_read),
    .din2(FunctionalArithmeticUnit_rs_2_func_read),
    .din3(index3_reg_316),
    .dout(ReservationStation_f_fu_487_p5)
);

test_Issue_mux_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
test_Issue_mux_32g8j_U133(
    .din0(FunctionalArithmeticUnit_rs_0_s_V_read),
    .din1(FunctionalArithmeticUnit_rs_1_s_V_read),
    .din2(FunctionalArithmeticUnit_rs_2_s_V_read),
    .din3(index3_reg_316),
    .dout(ReservationStation_s_32_fu_496_p5)
);

test_Issue_mux_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
test_Issue_mux_32g8j_U134(
    .din0(FunctionalArithmeticUnit_rs_0_t_V_read),
    .din1(FunctionalArithmeticUnit_rs_1_t_V_read),
    .din2(FunctionalArithmeticUnit_rs_2_t_V_read),
    .din3(index3_reg_316),
    .dout(ReservationStation_t_35_fu_505_p5)
);

test_Issue_mux_42bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
test_Issue_mux_42bkb_U135(
    .din0(1'd1),
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd0),
    .din4(index3_reg_316),
    .dout(write_flag1_fu_532_p6)
);

test_Issue_mux_42bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
test_Issue_mux_42bkb_U136(
    .din0(1'd0),
    .din1(1'd1),
    .din2(1'd0),
    .din3(1'd0),
    .din4(index3_reg_316),
    .dout(write_flag4_fu_546_p6)
);

test_Issue_mux_42bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
test_Issue_mux_42bkb_U137(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd1),
    .din3(1'd1),
    .din4(index3_reg_316),
    .dout(write_flag7_fu_560_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_0_preg <= FunctionalArithmetic_236_fu_600_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_1_preg <= ap_phi_mux_FunctionalArithmetic_234_phi_fu_392_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_2_preg <= ap_phi_mux_FunctionalArithmetic_231_phi_fu_365_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_3_preg <= ap_phi_mux_FunctionalArithmetic_232_phi_fu_374_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_4_preg <= ap_phi_mux_FunctionalArithmetic_233_phi_fu_383_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_5_preg <= ap_phi_mux_FunctionalArithmetic_235_phi_fu_401_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_6_preg <= FunctionalArithmetic_237_fu_605_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_7_preg <= FunctionalArithmetic_238_fu_610_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_8_preg <= FunctionalArithmetic_239_fu_615_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd0))) begin
        FunctionalArithmetic_231_reg_362 <= FunctionalArithmeticUnit_calculateStages_0_func_read;
    end else if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        FunctionalArithmetic_231_reg_362 <= ReservationStation_f_reg_848;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd0))) begin
        FunctionalArithmetic_232_reg_371 <= FunctionalArithmeticUnit_calculateStages_0_Vs_read;
    end else if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        FunctionalArithmetic_232_reg_371 <= ReservationStation_s_32_reg_855;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd0))) begin
        FunctionalArithmetic_233_reg_380 <= FunctionalArithmeticUnit_calculateStages_0_Vt_read;
    end else if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        FunctionalArithmetic_233_reg_380 <= ReservationStation_t_35_reg_862;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd0))) begin
        FunctionalArithmetic_234_reg_389 <= FunctionalArithmeticUnit_calculateStages_0_Q_read;
    end else if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        FunctionalArithmetic_234_reg_389 <= FunctionalArithmetic_fu_579_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd0))) begin
        FunctionalArithmetic_235_reg_398 <= FunctionalArithmeticUnit_calculateStages_0_R_read;
    end else if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        FunctionalArithmetic_235_reg_398 <= FunctionalArithmetic_101_fu_593_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((1'b1 == ap_condition_192)) begin
            found_reg_302 <= 1'd1;
        end else if ((tmp_fu_419_p2 == 1'd1)) begin
            found_reg_302 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((1'b1 == ap_condition_192)) begin
            index3_reg_316 <= index_reg_290;
        end else if ((tmp_fu_419_p2 == 1'd1)) begin
            index3_reg_316 <= 2'd3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((tmp_fu_419_p2 == 1'd0) & (1'd1 == ReservationStation_r_fu_455_p5)) | ((p_read1_i_fu_449_p2 == 1'd0) & (tmp_fu_419_p2 == 1'd0))))) begin
        index_reg_290 <= i_fu_425_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        index_reg_290 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd0))) begin
        write_flag1_1_reg_351 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        write_flag1_1_reg_351 <= write_flag1_reg_889;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd0))) begin
        write_flag4_1_reg_340 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        write_flag4_1_reg_340 <= write_flag4_reg_894;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd0))) begin
        write_flag7_1_reg_329 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        write_flag7_1_reg_329 <= write_flag7_reg_899;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd0))) begin
        write_flag_reg_407 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        write_flag_reg_407 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd1))) begin
        ReservationStation_f_reg_848 <= ReservationStation_f_fu_487_p5;
        ReservationStation_s_32_reg_855 <= ReservationStation_s_32_fu_496_p5;
        ReservationStation_t_35_reg_862 <= ReservationStation_t_35_fu_505_p5;
        tmp_2_reg_843 <= {{ReservationStation_t_36_fu_464_p5[7:4]}};
        tmp_45_reg_838 <= tmp_45_fu_473_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_3_reg_869 <= tmp_3_fu_514_p2;
        tmp_4_reg_874 <= tmp_4_fu_519_p2;
        tmp_5_reg_879 <= tmp_5_fu_523_p2;
        tmp_6_reg_884 <= tmp_6_fu_528_p2;
        write_flag1_reg_889 <= write_flag1_fu_532_p6;
        write_flag4_reg_894 <= write_flag4_fu_546_p6;
        write_flag7_reg_899 <= write_flag7_fu_560_p6;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        ap_phi_mux_FunctionalArithmetic_231_phi_fu_365_p4 = ReservationStation_f_reg_848;
    end else begin
        ap_phi_mux_FunctionalArithmetic_231_phi_fu_365_p4 = FunctionalArithmetic_231_reg_362;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        ap_phi_mux_FunctionalArithmetic_232_phi_fu_374_p4 = ReservationStation_s_32_reg_855;
    end else begin
        ap_phi_mux_FunctionalArithmetic_232_phi_fu_374_p4 = FunctionalArithmetic_232_reg_371;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        ap_phi_mux_FunctionalArithmetic_233_phi_fu_383_p4 = ReservationStation_t_35_reg_862;
    end else begin
        ap_phi_mux_FunctionalArithmetic_233_phi_fu_383_p4 = FunctionalArithmetic_233_reg_380;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        ap_phi_mux_FunctionalArithmetic_234_phi_fu_392_p4 = FunctionalArithmetic_fu_579_p3;
    end else begin
        ap_phi_mux_FunctionalArithmetic_234_phi_fu_392_p4 = FunctionalArithmetic_234_reg_389;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        ap_phi_mux_FunctionalArithmetic_235_phi_fu_401_p4 = FunctionalArithmetic_101_fu_593_p3;
    end else begin
        ap_phi_mux_FunctionalArithmetic_235_phi_fu_401_p4 = FunctionalArithmetic_235_reg_398;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        ap_phi_mux_write_flag1_1_phi_fu_355_p4 = write_flag1_reg_889;
    end else begin
        ap_phi_mux_write_flag1_1_phi_fu_355_p4 = write_flag1_1_reg_351;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        ap_phi_mux_write_flag4_1_phi_fu_344_p4 = write_flag4_reg_894;
    end else begin
        ap_phi_mux_write_flag4_1_phi_fu_344_p4 = write_flag4_1_reg_340;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        ap_phi_mux_write_flag7_1_phi_fu_333_p4 = write_flag7_reg_899;
    end else begin
        ap_phi_mux_write_flag7_1_phi_fu_333_p4 = write_flag7_1_reg_329;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (found_reg_302 == 1'd1))) begin
        ap_phi_mux_write_flag_phi_fu_411_p4 = 1'd1;
    end else begin
        ap_phi_mux_write_flag_phi_fu_411_p4 = write_flag_reg_407;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_0 = FunctionalArithmetic_236_fu_600_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_1 = ap_phi_mux_FunctionalArithmetic_234_phi_fu_392_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_2 = ap_phi_mux_FunctionalArithmetic_231_phi_fu_365_p4;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_3 = ap_phi_mux_FunctionalArithmetic_232_phi_fu_374_p4;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_4 = ap_phi_mux_FunctionalArithmetic_233_phi_fu_383_p4;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_5 = ap_phi_mux_FunctionalArithmetic_235_phi_fu_401_p4;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_6 = FunctionalArithmetic_237_fu_605_p2;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_7 = FunctionalArithmetic_238_fu_610_p2;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_8 = FunctionalArithmetic_239_fu_615_p2;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (((tmp_fu_419_p2 == 1'd0) & (1'd1 == ReservationStation_r_fu_455_p5)) | ((p_read1_i_fu_449_p2 == 1'd0) & (tmp_fu_419_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_found_phi_fu_307_p4 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FunctionalArithmetic_101_fu_593_p3 = ((tmp_3_reg_869[0:0] === 1'b1) ? tmp_4_reg_874 : tmp_106_s_fu_587_p3);

assign FunctionalArithmetic_236_fu_600_p2 = (ap_phi_mux_write_flag_phi_fu_411_p4 | FunctionalArithmeticUnit_calculateStages_0_active_read);

assign FunctionalArithmetic_237_fu_605_p2 = (ap_phi_mux_write_flag1_1_phi_fu_355_p4 | FunctionalArithmeticUnit_rs_0_running_read_2);

assign FunctionalArithmetic_238_fu_610_p2 = (ap_phi_mux_write_flag4_1_phi_fu_344_p4 | FunctionalArithmeticUnit_rs_1_running_read_2);

assign FunctionalArithmetic_239_fu_615_p2 = (ap_phi_mux_write_flag7_1_phi_fu_333_p4 | FunctionalArithmeticUnit_rs_2_running_read_2);

assign FunctionalArithmetic_fu_579_p3 = {{tmp_2_reg_843}, {tmp_1_fu_574_p2}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_condition_192 = ((1'd0 == ReservationStation_r_fu_455_p5) & (tmp_fu_419_p2 == 1'd0) & (p_read1_i_fu_449_p2 == 1'd1));
end

assign ap_phi_mux_found_phi_fu_307_p4 = found_reg_302;

assign i_fu_425_p2 = (index_reg_290 + 2'd1);

assign p_read1_i_fu_449_p2 = (ReservationStation_t_fu_440_p5 & ReservationStation_s_fu_431_p5);

assign tmp_106_s_fu_587_p3 = ((tmp_5_reg_879[0:0] === 1'b1) ? tmp_6_reg_884 : 64'd0);

assign tmp_1_fu_574_p2 = (tmp_45_reg_838 | 4'd8);

assign tmp_3_fu_514_p2 = ((ReservationStation_f_reg_848 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_45_fu_473_p1 = ReservationStation_t_36_fu_464_p5[3:0];

assign tmp_4_fu_519_p2 = (ReservationStation_t_35_reg_862 + ReservationStation_s_32_reg_855);

assign tmp_5_fu_523_p2 = ((ReservationStation_f_reg_848 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_6_fu_528_p2 = (ReservationStation_s_32_reg_855 - ReservationStation_t_35_reg_862);

assign tmp_fu_419_p2 = ((index_reg_290 == 2'd3) ? 1'b1 : 1'b0);

endmodule //loadJob
